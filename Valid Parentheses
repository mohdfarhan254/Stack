/*
We use a stack to store opening brackets ((, {, [).
When we encounter a closing bracket (), }, ]), we check:
If the stack is empty â†’ Invalid (no matching opening bracket).
Otherwise, pop the top element and check if it matches the closing bracket.
In the end, the stack should be empty for the string to be valid.
*/

class Solution {
    public boolean isValid(String s) {
        
        
        Stack<Character> st= new Stack<>();

        for(int i=0;i<s.length();i++)
        {
            char ch= s.charAt(i);
            
            if(ch=='(' || ch=='[' || ch=='{')
            {
                st.push(ch);
            }
            else
            {
                if(st.size()==0)
                  return false;
                else
                {

                  char top=st.pop();

                  if((top=='(' && ch==')') || (top=='[' && ch==']') ||(top=='{' && ch=='}'))
                  {
                       continue;  
                  }
                   else
                     return false;

                }
            }
        }

        return st.size()==0;
    }
}
